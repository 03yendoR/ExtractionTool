# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'userinterface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import glob

from PyPDF2 import PdfFileReader, PdfFileWriter
import re

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(327, 412)
        MainWindow.setFixedSize(327, 412)
        MainWindow.setStyleSheet("background-color: rgb(0, 63, 90);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Gb_TextIdentifier = QtWidgets.QGroupBox(self.centralwidget)
        self.Gb_TextIdentifier.setGeometry(QtCore.QRect(18, 11, 290, 170))
        self.Gb_TextIdentifier.setStyleSheet("color: rgb(235, 217, 200);")
        self.Gb_TextIdentifier.setObjectName("Gb_TextIdentifier")
        self.Btn_Delete = QtWidgets.QPushButton(self.Gb_TextIdentifier)
        self.Btn_Delete.setGeometry(QtCore.QRect(200, 125, 75, 23))
        self.Btn_Delete.setObjectName("Btn_Delete")
        self.Btn_Delete.setStyleSheet("background-color: rgb(222, 102, 0); color: rgb(235, 217, 200);")
        self.Btn_Delete.clicked.connect(self.deleteText)
        self.Btn_Add = QtWidgets.QPushButton(self.Gb_TextIdentifier)
        self.Btn_Add.setGeometry(QtCore.QRect(13, 28, 75, 23))
        self.Btn_Add.setObjectName("Btn_Add")
        self.Btn_Add.setStyleSheet("background-color: rgb(222, 102, 0); color: rgb(235, 217, 200);")
        self.Btn_Add.clicked.connect(self.addText)
        self.Line_Text = QtWidgets.QLineEdit(self.Gb_TextIdentifier)
        self.Line_Text.setGeometry(QtCore.QRect(93, 29, 181, 21))
        self.Line_Text.setText("")
        self.Line_Text.setObjectName("Line_Path_2")
        self.List_Text = QtWidgets.QListWidget(self.Gb_TextIdentifier)
        self.List_Text.setGeometry(QtCore.QRect(13, 60, 261, 55))
        self.List_Text.setObjectName("List_Text")
        self.Gb_FileExtraction = QtWidgets.QGroupBox(self.centralwidget)
        self.Gb_FileExtraction.setGeometry(QtCore.QRect(18, 190, 290, 204))
        self.Gb_FileExtraction.setStyleSheet("color: rgb(235, 217, 200);")
        self.Gb_FileExtraction.setObjectName("Gb_FileExtraction")
        self.Btn_Extract = QtWidgets.QPushButton(self.Gb_FileExtraction)
        self.Btn_Extract.setGeometry(QtCore.QRect(13, 160, 261, 23))
        self.Btn_Extract.setObjectName("Btn_Extract")
        self.Btn_Extract.setStyleSheet("background-color: rgb(222, 102, 0); color: rgb(235, 217, 200);")
        self.Btn_Extract.clicked.connect(self.getFiles)
        self.Btn_Destination = QtWidgets.QPushButton(self.Gb_FileExtraction)
        self.Btn_Destination.setGeometry(QtCore.QRect(13, 62, 75, 23))
        self.Btn_Destination.setObjectName("Btn_Destination")
        self.Btn_Destination.setStyleSheet("background-color: rgb(222, 102, 0); color: rgb(235, 217, 200);")
        self.Btn_Destination.clicked.connect(self.getDestinationFolder)
        self.Line_Destination = QtWidgets.QLineEdit(self.Gb_FileExtraction)
        self.Line_Destination.setGeometry(QtCore.QRect(93, 63, 181, 21))
        self.Line_Destination.setObjectName("Line_Destination")
        self.Rb_Remove = QtWidgets.QRadioButton(self.Gb_FileExtraction)
        self.Rb_Remove.setGeometry(QtCore.QRect(75, 129, 82, 17))
        self.Rb_Remove.setObjectName("Rb_Remove")
        self.Rb_Remove.setChecked(True)
        self.Rb_Save = QtWidgets.QRadioButton(self.Gb_FileExtraction)
        self.Rb_Save.setGeometry(QtCore.QRect(160, 129, 51, 17))
        self.Rb_Save.setObjectName("Rb_Save")
        self.Btn_Source = QtWidgets.QPushButton(self.Gb_FileExtraction)
        self.Btn_Source.setGeometry(QtCore.QRect(13, 28, 75, 23))
        self.Btn_Source.setObjectName("Btn_Source")
        self.Btn_Source.setStyleSheet("background-color: rgb(222, 102, 0); color: rgb(235, 217, 200);")
        self.Btn_Source.clicked.connect(self.getSourceFolder)
        self.Line_Source = QtWidgets.QLineEdit(self.Gb_FileExtraction)
        self.Line_Source.setGeometry(QtCore.QRect(93, 29, 181, 21))
        self.Line_Source.setObjectName("Line_Source")
        self.Cb_Connect2Web = QtWidgets.QCheckBox(self.Gb_FileExtraction)
        self.Cb_Connect2Web.setGeometry(QtCore.QRect(100, 100, 111, 17))
        self.Cb_Connect2Web.setObjectName("Cb_Connect2Web")
        # self.Cb_Connect2Web.setChecked(True)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Varialbles
        self.FilePath = os.path.expanduser('~\Documents\Medrecextractool')
        self.FileTextIdentifier = 'textidentifiers.ime'
        self.FileSourcePath = 'source.txt'
        self.FileDestinationPath = 'destination.txt'

        self.readFile()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MedRec Extractor"))
        self.Gb_TextIdentifier.setTitle(_translate("MainWindow", "Text Identifier"))
        self.Btn_Delete.setText(_translate("MainWindow", "Delete"))
        self.Btn_Add.setText(_translate("MainWindow", "Add"))
        self.Gb_FileExtraction.setTitle(_translate("MainWindow", "File Extraction"))
        self.Btn_Extract.setText(_translate("MainWindow", "Extract"))
        self.Btn_Destination.setText(_translate("MainWindow", "Destination"))
        self.Rb_Remove.setText(_translate("MainWindow", "Remove"))
        self.Rb_Save.setText(_translate("MainWindow", "Save"))
        self.Btn_Source.setText(_translate("MainWindow", "Source"))
        self.Cb_Connect2Web.setText(_translate("MainWindow", "Connect2Web"))

    # Read save data
    def readFile(self):
        self.createTextIdentifierFile()
        
        # This is for text identifiers
        f = open(self.FilePath + '\\' + self.FileTextIdentifier, 'r')
        for line in f.read().strip().split('\n'):
            if line != '':
                self.List_Text.addItem(line)
        f.close()

        # This is for the source and destination path
        arr = [{'text':self.FileSourcePath, 'widget':self.Line_Source}, {'text':self.FileDestinationPath, 'widget':self.Line_Destination}]

        for item in arr:
            f = open(self.FilePath + '\\' + item['text'], 'r')          
            item['widget'].setText(f.read().strip())
            f.close()

    # Create text file to save text identifiers
    def createTextIdentifierFile(self):
        # Check if folder is exisiting
        if not os.path.isdir(self.FilePath):
            os.makedirs(self.FilePath)

        # Check if file exists
        arr = [self.FileTextIdentifier, self.FileSourcePath, self.FileDestinationPath]
        
        for filename in arr:
            fn = self.FilePath + '\\' + filename
            if not os.path.isfile(fn):
                f = open(fn, "w")
                f.close()

    # Add new value to text file
    def addToTextFile(self, fname, txt):
        f = open(self.FilePath + '\\' + fname, 'a')
        f.write(txt + '\n')
        f.close()

    # Function to add text indentifier
    def addText(self):
        # Don't add if text box is empty
        if self.Line_Text.text().strip() != '':
            
            t = self.Line_Text.text()

            # Add item to the list box
            self.List_Text.addItem(t)

            # Set focus on the last added item
            self.List_Text.setCurrentRow(self.List_Text.count() - 1)
            
            # Clear line text
            self.Line_Text.clear()
            
            # Add value to text file
            self.addToTextFile(self.FileTextIdentifier, t)

    def deleteInTextFile(self, fname, index):
        f = open(self.FilePath + '\\' + fname, 'r+')
        # Get all the value in list
        arr = f.read().strip().split('\n')
        
        # Delete the item in arr
        del arr[index]
        
        # Delete all content
        f.truncate(0)
        
        # Write the remaining items
        for txt in arr:
            f.write(txt + '\n')
        
        f.close()

    # Delete text identifier
    def deleteText(self):
        # Get index
        index = self.List_Text.currentRow()
        
        if  index > -1:
            # Delete in list box
            self.List_Text.takeItem(index)

            # Delete in text file
            self.deleteInTextFile(self.FileTextIdentifier, index)

    def addSourceDestinationToText(self, fname, txt):
        f = open(self.FilePath + '\\' + fname, 'w+')
        f.truncate(0)
        f.write(txt)
        f.close()

    def getSourceFolder(self):
        SourceFolder = str(QFileDialog.getExistingDirectory())
        self.Line_Source.setText(SourceFolder)
        self.addSourceDestinationToText(self.FileSourcePath, SourceFolder)

    def getDestinationFolder(self):
        DestinationFolder = str(QFileDialog.getExistingDirectory())
        self.Line_Destination.setText(DestinationFolder)
        self.addSourceDestinationToText(self.FileDestinationPath, DestinationFolder)

    def sourceFile(self, srcPath):
        # Check if there is a specific file to extract
        if not srcPath.find('.pdf') > -1:
            # If there is no specific file then look for the file with latest modified date
            try:
                listOfFiles = glob.glob(srcPath + '/*pdf') # * means all if need specific format then *.csv
                latestFile = max(listOfFiles, key=os.path.getmtime)
                filePath = latestFile
            except:
                filePath = ''
        else:
            filePath = srcPath

        return filePath

    def saveFiles(self, filepath, writer):
        # Get file name from a URL
        firstpos=filepath.rfind("\\")
        lastpos=len(filepath)
        OutputFileName = filepath[firstpos + 1:lastpos]
        OutputPath = self.Line_Destination.text() + '\\' + OutputFileName

        if os.path.isdir(self.Line_Destination.text()):
            if writer.getNumPages() > 0:
                with open(OutputPath, 'wb') as Out:
                    writer.write(Out)

             # print('File Extraction Done.')
            self.messageBox('File Extraction Done         ', QMessageBox.Information)
        else:
            self.messageBox('Destination folder not found         ', QMessageBox.Warning)

    def extractFiles(self, srcPath):
        filePath = self.sourceFile(srcPath)

        if os.path.isfile(filePath):
            # open the pdf file
            Object = PdfFileReader(self.sourceFile(srcPath))
            
            # get number of pages
            NumPages = Object.getNumPages()

            # Pdf Writer
            CoverBlankWriter = PdfFileWriter()
            NonCoverBlankWriter = PdfFileWriter()

            for i in range(0, NumPages):
                PageObj = Object.getPage(i)

                # Search for the text identifier
                Text = PageObj.extractText()

                # Check if page is a blank page
                if len(Text) < 1:
                    CoverBlankWriter.addPage(PageObj)
                    
                    # If page is not blank then search for the Identifier
                else:

                    for x in range(self.List_Text.count()):
                        # Search Results
                        result = re.search(self.List_Text.item(x).text(), Text.upper())

                    try:
                        if result != None:
                            CoverBlankWriter.addPage(PageObj)
                        
                        # If page is not blank and identifier not found
                        else:
                            NonCoverBlankWriter.addPage(PageObj)
                    except:
                        # print('There is no identifier')
                        self.messageBox('No text identifier found         ', QMessageBox.Information)

            if self.Rb_Remove.isChecked():
                self.saveFiles(filePath, NonCoverBlankWriter)
            else:
                self.saveFiles(filePath, CoverBlankWriter)
            
        else:
            # print('File not found.')
            self.messageBox('File not found         ', QMessageBox.Warning)

    def getFiles(self):
        # Get the source path provided
        srcPath = self.Line_Source.text()

        if self.Cb_Connect2Web.isChecked():
            print('connect to web')
        else:
            self.extractFiles(srcPath)

    def messageBox(self, text, icon):
        msg = QMessageBox()
        msg.setWindowTitle("MedRec Extractor")
        msg.setText(text)
        msg.setIcon(icon)
        x = msg.exec()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
